trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-22.04'

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '8.x'

    steps:
    # Kies expliciet een Node-versie (18 is stabiel met veel toolchains)
    - task: NodeTool@0
      displayName: 'Use Node.js 18'
      inputs:
        versionSpec: '18.x'

    # .NET SDK
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    # NPM dependencies installeren (sneller/consistenter in CI)
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: 'ci'
        verbose: false

    # Compileer Sass met dart-sass (geen native build meer nodig)
    # Pas paden aan als je een submap gebruikt (bijv. $(wwwrootDir)/scss:$(wwwrootDir)/css)
    - script: './node_modules/.bin/sass $(wwwrootDir):$(wwwrootDir) --no-source-map'
      displayName: 'Compile Sass assets'

    # Gulp taken (zorg dat gulp & gulp-sass@^5 in devDependencies staan)
    - task: Gulp@1
      displayName: 'Run gulp tasks'
      inputs:
        # Laat defaults hun werk doen; optioneel kun je targets meegeven:
        # targets: 'build'
        # gulpFile: 'gulpfile.js'
        publishJUnitResults: false

    # Bouwinfo wegschrijven
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    # .NET restore/build/publish
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-22.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: dev website'
            inputs:
              azureSubscription: 'AA5544(a48b76f0-8c42-455f-a5be-d03fcab50b37)'
              appType: 'webAppLinux'
              appName: 'tailspin-space-game-web-dev-15717'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
